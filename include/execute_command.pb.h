// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execute_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_execute_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_execute_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_execute_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_execute_5fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_execute_5fcommand_2eproto;
namespace ec {
class CommandReq;
struct CommandReqDefaultTypeInternal;
extern CommandReqDefaultTypeInternal _CommandReq_default_instance_;
class CommandResp;
struct CommandRespDefaultTypeInternal;
extern CommandRespDefaultTypeInternal _CommandResp_default_instance_;
}  // namespace ec
PROTOBUF_NAMESPACE_OPEN
template<> ::ec::CommandReq* Arena::CreateMaybeMessage<::ec::CommandReq>(Arena*);
template<> ::ec::CommandResp* Arena::CreateMaybeMessage<::ec::CommandResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ec {

// ===================================================================

class CommandReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ec.CommandReq) */ {
 public:
  inline CommandReq() : CommandReq(nullptr) {}
  ~CommandReq() override;
  explicit constexpr CommandReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandReq(const CommandReq& from);
  CommandReq(CommandReq&& from) noexcept
    : CommandReq() {
    *this = ::std::move(from);
  }

  inline CommandReq& operator=(const CommandReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReq& operator=(CommandReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandReq* internal_default_instance() {
    return reinterpret_cast<const CommandReq*>(
               &_CommandReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandReq& a, CommandReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandReq* New() const final {
    return new CommandReq();
  }

  CommandReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ec.CommandReq";
  }
  protected:
  explicit CommandReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_MUST_USE_RESULT std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:ec.CommandReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execute_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class CommandResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ec.CommandResp) */ {
 public:
  inline CommandResp() : CommandResp(nullptr) {}
  ~CommandResp() override;
  explicit constexpr CommandResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandResp(const CommandResp& from);
  CommandResp(CommandResp&& from) noexcept
    : CommandResp() {
    *this = ::std::move(from);
  }

  inline CommandResp& operator=(const CommandResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResp& operator=(CommandResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResp* internal_default_instance() {
    return reinterpret_cast<const CommandResp*>(
               &_CommandResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandResp& a, CommandResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandResp* New() const final {
    return new CommandResp();
  }

  CommandResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ec.CommandResp";
  }
  protected:
  explicit CommandResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandResultFieldNumber = 1,
  };
  // string commandResult = 1;
  void clear_commandresult();
  const std::string& commandresult() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commandresult(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commandresult();
  PROTOBUF_MUST_USE_RESULT std::string* release_commandresult();
  void set_allocated_commandresult(std::string* commandresult);
  private:
  const std::string& _internal_commandresult() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commandresult(const std::string& value);
  std::string* _internal_mutable_commandresult();
  public:

  // @@protoc_insertion_point(class_scope:ec.CommandResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commandresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_execute_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandReq

// string command = 1;
inline void CommandReq::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CommandReq::command() const {
  // @@protoc_insertion_point(field_get:ec.CommandReq.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandReq::set_command(ArgT0&& arg0, ArgT... args) {
 
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ec.CommandReq.command)
}
inline std::string* CommandReq::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:ec.CommandReq.command)
  return _s;
}
inline const std::string& CommandReq::_internal_command() const {
  return command_.Get();
}
inline void CommandReq::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandReq::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandReq::release_command() {
  // @@protoc_insertion_point(field_release:ec.CommandReq.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandReq::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ec.CommandReq.command)
}

// -------------------------------------------------------------------

// CommandResp

// string commandResult = 1;
inline void CommandResp::clear_commandresult() {
  commandresult_.ClearToEmpty();
}
inline const std::string& CommandResp::commandresult() const {
  // @@protoc_insertion_point(field_get:ec.CommandResp.commandResult)
  return _internal_commandresult();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandResp::set_commandresult(ArgT0&& arg0, ArgT... args) {
 
 commandresult_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ec.CommandResp.commandResult)
}
inline std::string* CommandResp::mutable_commandresult() {
  std::string* _s = _internal_mutable_commandresult();
  // @@protoc_insertion_point(field_mutable:ec.CommandResp.commandResult)
  return _s;
}
inline const std::string& CommandResp::_internal_commandresult() const {
  return commandresult_.Get();
}
inline void CommandResp::_internal_set_commandresult(const std::string& value) {
  
  commandresult_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandResp::_internal_mutable_commandresult() {
  
  return commandresult_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandResp::release_commandresult() {
  // @@protoc_insertion_point(field_release:ec.CommandResp.commandResult)
  return commandresult_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandResp::set_allocated_commandresult(std::string* commandresult) {
  if (commandresult != nullptr) {
    
  } else {
    
  }
  commandresult_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commandresult,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ec.CommandResp.commandResult)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ec

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_execute_5fcommand_2eproto
